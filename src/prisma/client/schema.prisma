generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique @db.VarChar(100)
  username   String   @unique @db.VarChar(100)
  password   String   @db.VarChar(500)
  role       UserRole
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  profile    Profile?
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  Followers  Follow[]  @relation("FollowerRelation")
  followings Follow[]  @relation("FollowingRelation")
}

model Profile {
  id         String   @id @default(uuid())
  fullname   String
  bio        String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user_id      String        @unique
  user         User          @relation(fields: [user_id], references: [id])
  profileImage ProfileImage?
  follows      Follow[]
}

model ProfileImage {
  id         String   @id @default(uuid())
  file_url   String
  filename   String
  path       String
  size       Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  profile_id String  @unique
  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
}

model Follow {
  id           String   @id @default(uuid())
  profile_id   String
  follower_id  String
  following_id String
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  profile Profile @relation(fields: [profile_id], references: [id])

  // Relasi ke User sebagai pengikut
  follower  User @relation("FollowerRelation", fields: [follower_id], references: [id], onDelete: Cascade)
  // Relasi ke User sebagai yang diikuti
  following User @relation("FollowingRelation", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id])
  @@index([follower_id, following_id])
}

model Post {
  id         String   @id @default(uuid())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user_id    String

  likes     Like[]
  user      User       @relation(fields: [user_id], references: [id])
  comments  Comment[]
  postImage PostImage?
}

model PostImage {
  id         String   @id @default(uuid())
  file_url   String
  filename   String
  path       String
  size       Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  post_id String @unique
  post    Post   @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  user_id    String
  post_id    String
  parent_id  String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  likes    Like[]
  user     User      @relation(fields: [user_id], references: [id])
  post     Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  comment  Comment?  @relation("commentToComment", fields: [parent_id], references: [id], onDelete: Cascade)
  comments Comment[] @relation("commentToComment")
}

model Like {
  id         String  @id @default(uuid())
  user_id    String
  post_id    String?
  comment_id String?

  user    User     @relation(fields: [user_id], references: [id])
  post    Post?    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id, comment_id])
  @@index([user_id, post_id, comment_id])
}

enum UserRole {
  ADMIN
  USER
}
